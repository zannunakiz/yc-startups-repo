1.implementasi next auth/ authjs
	- ikuti docuentasinya
	-di web next auth: provider > GitHub > buka akun GitHub dlu
	- buka akun GitHub, settings > developer settings > oAuth > new oAuth > http://localhost:3000 > form akhir diisi dari link yang ada example.com dari step 2nextauth tapi ganti example jadi localhost:3000.

2. di env.local tambahkan AUTH_GITHUB_ID dan AUTH_GITHUB_SECRET dan modif auth.ts (ikut code docs)

3. bikin navbar component (async)
	- cek udh login apa belum dengan cara import {auth} dari auth.ts ex:[const session = await auth()]
	- {session && session?.user ? (signOut from auth.js) : (signIn('github') from auth.js)} np:gunakan await karena keduanya async. np:gunakan "use server" di fungsi
	- untuk signin gunakan <form action= fungsi....><button>Login</button></form>
	-untuk signout signout({redirectTo:'/'})

4. Setup tailwind.config.js
5. download assests and fonts, replace files di app folder,
6. LALU MODIF FONTS di layout.tsx most parent
const workSans = localFont({
src:[{}, {}, {}, {}....], //path, weight, style
variable: '--font-work-sans'
})

7.masih di layout, modif title dan description



8. go to shadcn web search CLI
 - npx shadcn@latest init
 - new York
 - slate
 - css yes

9.copy globals.css buat utilities alias preset classes (atau bikin sendiri)
	@layer utilities {
		.hero{
			@apply text-black bg-blue-200
		}
	}

  copas tailwind.config

9. (root)/page.tsx alias homepage DIMULAI

10. HERO SECTION
- bikin header, subheader
-bikin components/SearchForm.tsx

11. di SearchForm.tsx
-gunakan Form from 'next/form'
- action ="/" scroll={false}
- dalam searchForm kasih <input> html 
- <input> name="query" defaultValue=""
- di Bawah input, {query && <SearchFormReset />}

- di SearchFormReset.tsx, bikin fungsi reset(){
const form = document.querySelector(...) as HTMLFormElement;
if(form) form.reset
}
- bawhny fungsi reset <button> type="reset" onCLick={reset}
- bikin searchformreset jadi client component
- di dalam button reset, beri Link ke '/' dan beri icon X from lucide-react

- balik ke SeachForm
- abis panggil reset component beri buttontype submit, beri icon Search from lucide-react


12.sempurnakan query
- di home
- ubah home jadi async, destruktur searchParams beri type Promise<{query? : string}>
- const query = (await params).query
- const posts = {isi property postingan seperti _createdAt, id, category, image, views, title,
   description, author:{_id:x, name:'Van'}
   } digunakan buat dummy post
- passed query dan posts as props to searchform.tsx
- download shadcn button


13.StartUps and Cards

14.di bawah hero/pink container bikin <section>

- <p> query ? `Search results for "{query}"` : `All Startups`
- <ul> grid, di dalamnya map component <StartupCard> dengan map ambil parameter (post : startupTypeCard, index:number)
- passed key:post?._id post:post ke komponen startupcard

- di StartupCard
- ke utils.ts bikin fungsi formatDate(date:string){
return new Date(date).toLocaleString('en-US', {
 month: 'long',
 day: 'numeric',
 year:'numeric'
})
  abis tu balik lagi ke StartupCard

- di StartupCard render 
  formatDate(_createdAt); 
  EyeIcon from lucide-react diikuti span {views}; 
  <Link href={`/user/${author?._id}`}; 
  dalam Link itu bikin <p> post.author?.name; 
  <Link href={'/startup/${_id}'}; 
  dalam link itu taruh h3{title}; 
  Link ke /user/${author?._id} dalamnya Image profile pict;
  Link ke '/startup/${_id}' dalamnya <p> {description};
  masih di dalam link startup, di Bawah <p> description, add img src={image};
  Link ke `/?query=${category.toLowerCase()}` , dalamnya <p> {category};
  <Button asChild></Button> (from shadcn) dalam button add Link ke `/startup/${_id}`, dalam link kasi text 'Details'

- pada next config.ts bei ini, karena kadang nextjs ga percaya akan link image yg kita berikan. jadi seperti beri allow :
 const nextConfig: NextConfig = {
  images: {
    dangerouslyAllowSVG: true,
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '*'
      }
    ]
  }
 };


15. mulai SANITY, install scratch cli, nextjs folder yes, typescript yes, embedded studio yes, route /studio, clean project with no predfined schema, add env local file yes;
abis tu 'npm install next-sanity@canary';
kalo udah cek web'/studio'; kalo error buka package.json > scripts > dev > hapus --turbo/--turbopack; 
rerun npm run dev'


16. SCHEMA SANITY
- file /sanity/schemaTypes create file author.ts, di author.ts
export const author = defineType({
   name: 'author',
   title: 'Author',
   type: 'document',
   icon: UserIcon,
   fields: [
      defineField({
         name: 'id',
         type: 'number'
      }),
      defineField({
         name: 'name',
         type: 'string'
      }),
      defineField({
         name: 'username',
         type: 'string'
      }),
      defineField({
         name: 'email',
         type: 'string'
      }),
      defineField({
         name: 'image',
         type: 'url'
      }),
      defineField({
         name: 'bio',
         type: 'text'
      }),
   ]
})

- ke file  /sanity/schemaTypes/index.js taruh component author diatas ke dalam array variable types
- ke file structure.ts modif .items jadi
.items([S.documentTypeListItem('author').title('Authors')]

- ke file /sanity/schemaTypes create file startup.ts, di startup.ts mirip author.ts. copas wae, hanya define types.
Lalu update /sanity/schemaTypes/index.js dan structure.ts (tambahkan di masing masing array seperti waktu export author.ts)

- npm install sanity-plugin-markdown karena di file startup.ts, pake type markdown;
  abis tu pada sanity.config.ts, add markdownSchema() dalam array plugins
- ke file /app/layout.tsx tambahkan "import 'easymde/dist/easymde.min.css'" to make sure sanity editor looks good with css.

-check web /studio

17. BUKA WEB /studio
-bikin authors random.
- bikin startups random.


18.FETCH DATA FROM SANITY
- web /studio pilih menu vision; isi '*' di query lalu fetch

- ragam sanity QUERY: 
  *[0];  *[_type=="startup"];

  *[_type=="startup" && defined(slug.current)]{ //dalam fungsi bisa pilih mana aj yg mau difetch
    _id, title, slug, _createdAt, 
    author -> {_id, name, image, bio}, 
    views, description, category, image
  };

- bikin file queries.ts di /sanity/lib
- di queries.ts: export const STARTUPS_QUERY = defineQuery (`paste sanity query yg dipake (rekomendasi sanity QUERY ke-3)`)
- masih di queries.ts, setelah tutup ARRAY di sanity query 3 tambahkan: | order(_createdAt desc) //buat sorting.
- Pindah ke Home page.tsx
- di home, ubah posts variable ke: const posts = await client.fetch(STARTUPS_QUERY); //opsional console,log(posts, null, 2) //null dan 2 buat spacing yg enak
- cek home page, seharusnya posts sudah terupdate.
 


19. SANITY DATA TYPES MAKING

-docs reference https://www.sanity.io/learn/course/content-driven-web-application-foundations/generate-typescript-types.

- extract data dlu agar bisa bikin types sanity otomasi dengan npx sanity@latest schema extract --path=./sanity/extract.json
- create file di root (BUKAN folder(root) tapi root betulan) Bernama sanity-typegen.json
paste ini (source https://www.sanity.io/learn/course/content-driven-web-application-foundations/generate-typescript-types)
{
  "path": "./src/**/*.{ts,tsx,js,jsx}",
  "schema": "./src/sanity/extract.json", // baca file shcema yg dibikin
  "generates": "./src/sanity/types.ts" // convert jadi types
}
hapus path src pada schema dan generates

- npx sanity@latest typegen generate
- untuk automated convert, ke package.json > scripts > tambahkan paste dari scripts docs (perhatikan path, hapus src)
- npm run typegen (setiap mau convert, run ini, akan otomatis)

20. FIX StartupTypeCard
- ke StartupCard.tsx, export type StartupTypeCard = Omit<Startup, "author"> & {author? : Author(import dari types)}
- sekarang StartupTypeCard sudah benar, silahkan cek file lain yg pake ini.



21. NEXT JS CACHE AND AUTO UPDATE
- saat /sanity/clinet.ts useCdn:True(defaultnya), maka next js sanity akan save cache content selama 60 detik dan update otomatis. ini Namanya ISR(incremental Static Regeneration)
- pada kasus ini kita set useCdn: false
- npm i server-only
- buat file sanity/lib/ live.ts, isi dengan ini
import "server-only";

import { defineLive } from "next-sanity";
import { client } from "@/sanity/lib/client";

export const { sanityFetch, SanityLive } = defineLive({ client });

- ke env.local tambahkan: NEXT_PUBLIC_SANITY_API_VERSION  "vX" // kalo ad versi lain, akan dikasitau di desckripsi video jsm next15
-pada home,hamus const posts, ganti  
const { data: posts } = await sanityFetch({ query: STARTUPS_QUERY});
this will ensure revalidate page whenever new changes came	
- kalo cek file live ada SanityLive ga kepake, pindah ke homepage, ka paling Bawah sebelum tutup akhir, tambahkan <SanityLive>

-TES dengan web /studio, bikin startup baru while monitoring web homepage, sharusnya live update.



22. SEARCHBAR FETCHING QUERY
- di home const params = {search: query || null}
- pada sanity/lib/queries.ts modif
*[_type == "startup" && defined(slug.current) && !defined($search) || title match $search || category match $search || author->name match $search] | order(_createdAt desc){...} // ini semua nunjukkin sear and match by apa aja.
- update const {data:posts} di home, tambahin params
- tes web, click category salah satu post juga buat test, harusnya query berubah.




23.MAKING DETAILS PAGE FETCHING
- bikin file dan folder app>(root)>startup>[id]>page.tsx run rafce
- ubah jadi async, deconstruct params merupakan type jadi Promise id:string, bikin const id. tes variable id.
- ke web /studio/vision buat mulai tes memperoleh startup details dari id.
- di vision kolom query:
  *[_type=="startup" && _id == $id][0]{ //[0] menunjukkan hanya beri query yg match satu wae
    _id, title, slug, _createdAt, 
    author -> {_id, name, username, image, bio}, 
    views, description, category, image, pitch
  };
  lalu para kolom params:
   {
     id: isi ID
   }
  lalu fetch
  kalo null, itu penyebabnya idnya parsed ke bentuk web, ke menu startups, pilih salah satu lalu titik tiga lalu inspect>parsed>copas _id

- copas query diatas ke query.ts, bikin export const STARTUP_BY_ID_QUERY
- untuk mengimplementaskan PPR alias render dinamis dan render static yang bagus, pada next.config.js, pada const nextConfig tambahkan:
  experimental: {
    ppr: "incremental",
  },
  devIndicators: {
    appIsrStatus: true,
    buildActivity: true,
    buildActivityPosition: "bottom-right",
  },

- ke startup page.tsx export const experimental_ppr = true
- testing time startup detail page
const post = await client.fetch(STARTUP_BY_ID_QUERY, {id})
if(!post) return notFound()
coba return post.title, dll.
baru run web seharusnya kalo klik detail, muncul post.title np: error pribadi, hapus aja experimental ppr.




24.STARTUP DETAILS PAGE
- di file startup page.tsx render object yg diterima dari const post, hias.
- ada Link href = "/user/${post.author?._id}" buat ke author profile kalo klik
- karena post.pitch itu markdown, to parse markdown to html string: install markdown-it dengan cara 
  npm install markdown-it, lalu ikuti docsnya;

- kalo udh parse markdown, gunakan ternary sebelum render pitchnya, antara <p> no result atau lanjut;
  karena security issues, render html di react harus, contoh:
  <article dangerouslySetInnerHTML={{_html: parsedcontent}} />

-for the dynamic Content
  <Suspense fallback={<Skeleton />} /> //suspense itu react comp buat render dinamis, fallback buat  alternatif kalo gabisa render, Skeleton install dari shadcn, di dalamnya suspense, nanti render View component yg kita buat abis ni. passed {id}

- bikin View.tsx dan Ping.tsx di component folder
- dalam View.tsx panggil Ping.tsx dan bikin component View di pojokan gitu.
- dalam Ping.tsx buatlah ping light animationnya pake css or library.
- ke queries.ts file, bikin STARTUP_VIEWS_QUERY, isinya:
   defineQuery(`
    *[_type == "startup" && _id == $id][0]{
        _id, views
    }
  `);
- Bikin View.tsx jadi async, panggil STARTUP_VIEWS_QUERY tanpa cdn dan simpan di variable totalViews:
     const { views: totalViews } = await client
    .withConfig({ useCdn: false })
    .fetch(STARTUP_VIEWS_QUERY, { id });


25. Making write function SANITY live update Views
-ke sanity projectmu > api > add new api tokens > beri nama > editor access > save
- ke env.local SANITY_WRITE_TOKEN > copas token yg dicreate
- ke file/sanitiy/env dibawah const projectID: export token= process.env.SWT
- bikin file di /sanity/lib/write-client.ts. COPAS content client.ts ke sini; beri import "server-only"; tambahkan token; ganti nama variable;
-if(!writeClient.config().token) {throw new Error('blabla')}

-mulai update number of views
-Ke View.tsx sebelum return 
- await writeClient
  .patch(id) //mengupdate id pilihan
  .set({views: totalViews + 1})
  .commit();
- manfaatkan unstable_after from next.js, allowing you to execute fungsi after response is finished. Untuk Update views when fetching views done without blocking the UI.
- pada 'await writeClient' modif jadi: after(async()=>await writeClient....)
- pada next.config.ts> experimental> after:true

- tes views naik kalo refresh
- tes PPR dengan cara client.ts>useCdn di truekan. ganti judul lewat /studio. baru tefresh; Views akan tetap naik dan judul akan berubah hanaya jika 60seconds lewat.
- kesimpulan judul pake ISR, incremental static regeneration. Views pake SSR, Server Side Rendering




26. AUTH FLOW REVISION to be able generate and create author data To use in next session CREATE MENU

- checking if specific GitHub id exist
- to queries.ts> export const AUTHOR_BY_GITHUB_ID_QUERY= defienQuery
type author _id === $id [0]{_id, id,name, username, email, image, bio}
- ke auth.ts, untuk bikin callback that will executed after getting auth.
- dibawah providers add callbacks:{
    callbacks: {
      async signIn({
         user: { name, email, image },
         profile: { id, login, bio },
      }) {
         const existingUser = await client
            .withConfig({ useCdn: false })
            .fetch(AUTHOR_BY_GITHUB_ID_QUERY, {
               id,
            });

         if (!existingUser) {
            await writeClient.create({
               _type: "author",
               id,
               name,
               username: login,
               email,
               image,
               bio: bio || "",
            });
         }
         return true;
      }
   }

- callback diatas menunjukkan apabila tidak ad existing User maka akan dicreate

- selanjutnya making author id dngan modif jwt Token
- di Bawah async SignIn (masih dalam callbacks)add:
async jwt({token, account, profile})
cek if(account && profile) const user = await fetch ABGIQ dengan id:id
kalo !user token.id = user?._id
- dibahnya lagi async session
 async session({ session, token }) {
      Object.assign(session, { id: token.id });
      return session;
    },


- getting sanity id from session
- to home page.tsx  const session = await auth();console.log(session?.id);
- di root directory, bukan (root), create next-auth.d.ts, dalamnya:
import "next-auth";
declare module"next-auth"{} that have interface Session{id:string}; interface JWT{id:string}

- refresh home page, cek console.log session.idnya harusnya undefined. Hapus generated author dari web /studio. Logout dan Login ulang, harusnya ada id dan di /studio ada author GitHub berdasarkan GitHub oAuth data kita. (within 60 second updated)
- untuk hindari 60 secs, kita lakukan pada auth.ts modif .confignya supanya tidak chaching data 60 sec:
const existingUser = await client
        .withConfig({ useCdn: false })
        .fetch(AUTHOR_BY_GITHUB_ID_QUERY, {
const user = await client
          .withConfig({ useCdn: false })
          .fetch(AUTHOR_BY_GITHUB_ID_QUERY, {
- hapus generated author di /studio. login logout harusnya console log id muncul dan author muncul di /studio





27. COMPONENT CREATE PAGE
- file /app/(root)/startup/create/page.tsx rafce ubah div jadi <>
- const session = await auth()
if(!session){
redirect('/)} // kalo ga login gabisa ke menu create
- dalamnya ada component <StartupForm />

28. STARTUP FORM
- pindah ke StartupForm.tsx
- npx shadcn@latest add input textarea toast
- ubah div jadi form; 'use client'; variable errors use state<Record<string, string>>{}; // buat allow kalo ad string dlm error state.

- div1 dalamnya: label; <Input/> from shadcn id dan name'title'; bawahnya kalo error.title <p>{errors.title}</p>; //label,inputs,error berlaku untuk div1- div5
- div2 <Textarea/> shadcn; description
- div3 <Input />;category
- div4 <Input />; link (url foto)
- div5 npm i @uiw/react-md-editor; ikuti docs, tapi untuk useState variable jadi pitch;
  div5 data-color-mode="light" //supaya selalu light;
  <MDEditor 
	value={pitch} 
	onchange={(value)=>setPitch(value as string)} 
	id="pitch"
        preview="edit"
        height={300}
        style={{ borderRadius: 20, overflow: "hidden" }}
        textareaProps={{
            placeholder:
                "Briefly describe your idea and what problem it solves",
            }}
            previewOptions={{
                disallowedElements: ["style"], //disallow styling to keep base markdown properties only
            }}

/>
  
- <Button/> type="submit"; disabled={isPending}; {isPending? 'submitting':'submit'}; setelah tulisan dalam Button, render ,<Send /> merupakan icon.
- const isPending = false // indicator submitting value or not
- UI FORM SELESAI


29.SUBMITTTING CREATE FORM
- menggunakan react latest 'useActionState' which is better than 'useFormState'
- const router = useRouter()
- const [state, formAction, isPending] = useActionState(handleFormSubmit, {
    error: "",
    status: "INITIAL",
  });


- bikin file /lib/validation.ts sebagai tempat validasi form pake zod
- dalam validation.ts; export const formSchema = z.object({
  title: z.string().min(3).max(100),
  link: z.string().url() .refine(async (url) => {
      try {
        const res = await fetch(url, { method: "HEAD" }); //memperoleh HEAD saja untuk tau content-type apakah image

        const contentType = res.headers.get("content-type"); //Extract content type
        return contentType?.startsWith("image/");
      } catch {
        return false;
      }
    }),   //refine ini buat cek apakah content type image
   }),
  dll: tergantung formnya butuh apa aja.




- bikin fungsi handleFormSubmit
- const handleFormSubmit = async (prevState: any, formData: FormData) => {
    try {
      const formValues = {
        title: formData.get("title") as string,
        description: formData.get("description") as string,
     	pitch,
        dll tergantung form
      };
        await formSchema.parseAsync(formValues); //bandingin form values sama validasi zod.
	console.log(formValues)
        const result = await createIdea(prevState, formData, pitch); //createIdea emang blom kita buat, boleh command out dlu


    }
}
- catch (error) {
      if (error instanceof z.ZodError) { //error dari zod
        const fieldErorrs = error.flatten().fieldErrors; //flatten buat satukan jadi arr

        setErrors(fieldErorrs as unknown as Record<string, string>); // Record biar type defined dan typescript bangga
        return{...prevState, error:'VAlidation failed', status:'ERROR'}
      }
    return { //return kedua bila bukan error dari zod
        ...prevState,
        error: "An unexpected error has occurred",
        status: "ERROR",
      };
    }
- passed formAction pada <form action={formAction}>

- Ke general Layout.tsx yg bukan di folder app
- di layout.tsx, Bawah {children} tambahkan <Toaster /> shadcn
- ke /ui/toast.tsx modif variants>variant>default:"border bg-white text-slate-950 dark:bg-slate-950 dark:text-slate-50",

-balik ke StartupForm.tsx; const {toast} = useToast()
- toast({
        title: "Error",
        description: "An unexpected error has occurred",
        variant: "destructive", //bikin variant merah
      });
  np: Letakkan 2 kali di dalam catch sebelum return, dan abis catch sebelum return	

 
- sampe sini udh boleh tes submit form/sengaja salahin form. dan check console. kalo pusing sama vaidasi url image, command aj link di validation.ts

- hapus console.log(formValues) klo dh benar
- bawahnya console.log yg dihapus ini tambah:
jika result.status === 'SUCCESS', maka bikin toast yang success, router.push() ke link startup yg dibuat.




30. SERVER ACTIONS UNTUK CREATE STARTUP UNIQUE SLUG DAN FORM SAVED AUTOFILL
- bikin /lib/acions.ts; 'use server'; export const createPitch(state:any, form:formData, pitch:string){};

- ke utils.ts, bikin function parseServerActionResponse<T>(response:T){} buat return object yg di stringify lalu parse. //singkatan pSAR

- balik ke actions.ts; 

- dalam createPitch; //sampai ada tulisan createPitch tamat
- get access to active const session; klo gaad return pSAR dgn error dan status;
- const { title, description, category, link } = Object.fromEntries(
    Array.from(form).filter(([key]) => key !== "pitch"), // menyimpan tdcl, tapi pitch diperoleh dari createPitch
  );
- mulai genrerate slug, untuk unique startup identifier. dengan slugify;
-  const slug = slugify(title as string, { lower: true, strict: true }); 
- bikin try{} and catch{}; catch console.log(error) dan return pSAR error dan status
- dalam try{}
const startup = {} isinya object yg dipake startup, cth: title, slug:{type:slug, current:slug}, author:{_type:'reference', _ref:session?.id};
const result = await writeClient.create({_type:'startup', ...startup})
return pSAR ...result, error kossong, status
- createPitch tamat

-ke StartupForm.tsx
- uncommand result lines dll. ganti createIdea -> createPitch
- tes create menu di web. harusnya muncul toast dan redirect ke 404.
  dan cek /studio apakah sudah terbuat. dengan author sesuai.np: biasanya author baru kebaca harus relog dulu.
  dan form sudah bisa autofill.
  dan di homepage sudah updated.(60sec)
- kalo dah lancer, delete fake author dan fake startup dari studio




31. PERFORMANCE AND BUG TRACKING
- use SENTRY (https://arkride-solutions.sentry.io/onboarding/welcome/)
- install sentry; next js;
- ke package.json > "overrides" > tambahkan "next":"$next"  //Making sure sentry using same version as our nextJS
- copas auto config dari web sentry; // feel free change project name 
  have snetyr account, pilih project yg ad
  to avoid adblocker? no
  enable react annotations yes
  tracing yes
  replay yes
  example page yes
  ci/cd yes
  copy sentry auth Token dari terminal, lalu yes,continue
  dah, ikuti perintah akhir dari sentry
- tes throw error; balik ke page sentry pas mau copas. di Bawah ad tulisan error received; take me to my error;

- di web sentry, pilih menu user feedback > setup now> copas yg sentry.client.config.js> copas di dlm integrations mulai dari Semtry.feedbackIntegration, sisanya hapus
- ke web homepage harusnya di Bawah kanan ada report a bug.
-tes isi form report > balik ke websentry user feedback refresh > harusnya muncul reportnya



32. USER POFILE
- bikin /app/(root)/user/[id]/page.tsx
- tes klik profil mu kanan atas.
- di user page.tsx
- deconstruct params Pormise string id
- const id; const session; const user(ABIQ nanti dibuat.)
- if !user return notFound()

- ke queries.ts
- copas ABGIQ di bwhnya jadi ABIQ; ganti id pertama jadi _id

- ke user page.tsx; ganti div jadi react fragment
- render: 
  user?.name
  <Image> user?.image
  user?.username
  user?.bio
  kalo session?.id === id "Your" "All" // kalo ini akun kita atau kalo kita cek akun orang
  card container yang render <UserStartups/>; dan passed id;
- karena akan ada render userstartup yg dinamis, dan konten lain static maka pake ppr. di atas kasih export const experiemntal_ppr = true.

- bikin /components/UserStartups.tsx
- ke queries copas SQ jadi STARTUPS_BY_AUTHOR_QUERY > hapus search requirements, keculai order > jadi && author.ref == $id
- ke UserStartups.tsx
- const startups (SBAQ, {id})
- return empty fragment
- map startups variable untuk render <StartupCard key={a._id} post={a}/> : "<p> no posts yet" //a : StartupCardType

- akan ad error, karena di user page pas rendeer <UserStartups /> itu harusnya took time to load dlu, jadi..
- wrap di <Suspense fallback={}>
  dalam fallback kita install shadcn skeleton component;  //persegi panjang template buat loading

- ke StartupCard.tsx
- di paling bwh export const StartupCardSkeleton()=>(
  <>
      {[0, 1, 2, 3, 4].map((index: number) => (
         <li key={cn("skeleton", index)}>
            <Skeleton className="startup-card_skeleton" />
         </li>
      ))}
   </>
) // ngerender 5 template skeleton cards, classname sesuaikan.
- ke UserStartups > fallbacknya={<StartupCardSkeleton />}
- ke StartupCard > ganti pp jadi {author?.image!} dan ganti name jadi {author?.name!}
- tes logout login > create page > cek profil sendiri > harusnya aman.





33. MOBILE VIEW LOGOS
- Di Navbar.tsx bisa modif kalo layer mobile jadi icons
  logout jadi <Logout />
  create jad <BadgePlus />
- Ganti Accunt name jadi Avatar Image
  npx shadcn@latest add avatar
  di link ke dession.id ganti nama jadi <Avatar>
  <AvatarImage src=session?.user?.image alt />
  <AvatarFallback>INITIAL NAMA</AF> //fallback buat apabila gaad avatar



34. Grouping Different Categories of STARTUPS dengan awards website
- bikin /sanity/schemaTypes/playlist.ts
- copas content dari startup.ts ke playlist
- modif name title
- fields hanya pake 3
  title, slug sama seperti seblumnya
  defineField({
      name: "select",
      type: "array",
      of: [{ type: "reference", to: [{ type: "startup" }] }],
    }),
- ke index.ts tambagkan playlist

- ulangi npm run dev
- ke web /studio
- dipaling atas klik create > playlist >  isi form (cth: startups of the day) > publish 
- ke queries:
export const PLAYLIST_BY_SLUG_QUERY =
   defineQuery(`*[_type == "playlist" && slug.current == $slug][0]{
   id,
   title,
   slug,
   select[]->{
   _id,
   _createdAt,
   title,
   slug,
   author->{
      _id,
      name,
      slug,
      image,
      bio
   },
   views,
   description,
   category,
   image,
   pitch
   }
}`);


- ke file /startup page.tsx
- const {select: editorPosts} = (PBSQ, {slug:'trails-series'}) 
  // select ini diisi bebas
  // slug ini diisi berdasarkan slug pas isi form playlist
- ke paling bwh sebelum Suspense
- editorPosts.length > 0 && (
   <div>
    <p>Trails Series</p>
    <ul>{editorPosts.map render <StartupCard/>}</ul>
   </div>
  )
- ke atas, satukan const post dan const {select} jadi 1 fetch paralel fetch bukan sequencial rendering fetch supaya lebih lancar
  const [post, { select: editorPosts }] = await Promise.all([
    client.fetch(STARTUP_BY_ID_QUERY, { id }),
    client.fetch(PLAYLIST_BY_SLUG_QUERY, {
      slug: "editor-picks-new",
    }),
  ]);
- coba visit salah satu startup, harusnya di paling bwh ada playlist tergantung startup itu termasuk playlist ap gak.














35. DEPLOYMENT FINALE
- ke GitHub create repo
- git init
- git add ./
- git commit -m "first commit"
- git branch -M main
- git remote add origin https://github.com/zannunakiz/yc-startups-repo.git // kao udh ada bisa ganti jadi origin1
- git push -u origin main




36. CONGRATS ARKRIDE YOUVE DONE IT










**FREE MARKDOWN TEMPLATES**


# TRAILS OF COLD STEEL ACADEMY

## Nothern War Heroes

MR.ARKRIDE is a highly skilled strategist specializing in real-time war strategy control and combat management with soldats. With a deep understanding of tactical warfare, MR.ARKRIDE excels in orchestrating dynamic battlefield maneuvers, optimizing resource allocation, and leading troops with precision. Whether deploying advanced AI-driven simulations or coordinating on-the-ground operations, MR.ARKRIDE ensures victory through innovative strategies, adaptability, and unparalleled leadership in high-stakes combat scenarios.



 



